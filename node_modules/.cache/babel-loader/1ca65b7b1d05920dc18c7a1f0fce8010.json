{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\hind1\\\\OneDrive\\\\Bureau\\\\DeskTopFolder\\\\Linkedin-learning\\\\fichiers_d_exercice_reactjs_etats_application\\\\state\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport ToDoList from './ToDoList';\nimport NavBar from './NavBar';\nimport AddTask from './AddTask';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'; // import initialData from '../initialData'\n// import uniqid from 'uniqid'\n// import Fetching from './Fetching'\n//import uniqid from 'uniqid';\n\nclass App extends Component {\n  // state = {\n  //   fetching: true,\n  //   tasks: []\n  // }\n  // componentDidMount = () => {\n  //   let delay = Math.floor(Math.random() * 5000)\n  //   console.log(delay)\n  //   setTimeout(() => {\n  //     this.setState({\n  //       fetching: false,\n  //       tasks : initialData\n  //     })\n  //   }, delay)\n  // }\n  // onAddTask = (newTaskName) => {\n  //   let newTask = {\n  //     id: uniqid(),\n  //     name: newTaskName,\n  //     completed: false\n  //   }\n  //   this.setState(prevState => ({\n  //     tasks: [...prevState.tasks, newTask]\n  //   }))\n  // }\n  // onToggleCompleted = (taskId) => {\n  //   //get the task to modify\n  //   let updTask = this.state.tasks.find(task => task.id === taskId)\n  //   //toggle the value of completed in the task\n  //   updTask.completed = !updTask.completed\n  //   //put the new version of the task in the state\n  //   this.setState(prevState => (\n  //     prevState.tasks.map(task => {\n  //       return task.id === taskId ? updTask : task\n  //     })\n  //   ))\n  // }\n  // onDeleteCompleted = () => {\n  //   this.setState(prevState => {\n  //     let newState = prevState.tasks.filter(task => !task.completed)\n  //     return {\n  //       tasks: newState\n  //     }\n  //   })\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"toDo\",\n      children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/add-task\",\n              component: AddTask\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/:filter?\",\n              component: ToDoList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavBar, {\n            onDeleteCompleted: this.onDeleteCompleted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this); //end return in render\n  } //end render\n\n\n} //end App class\n\n\nexport default App;","map":{"version":3,"sources":["C:/Users/hind1/OneDrive/Bureau/DeskTopFolder/Linkedin-learning/fichiers_d_exercice_reactjs_etats_application/state/src/components/App.js"],"names":["React","Component","ToDoList","NavBar","AddTask","BrowserRouter","Switch","Route","App","render","onDeleteCompleted"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,aAAT,EAAyBC,MAAzB,EAAiCC,KAAjC,QAA6C,kBAA7C,C,CACA;AACA;AACA;AACA;;AAIA,MAAMC,GAAN,SAAmBP,SAAnB,CAA6B;AAE3B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAQ,EAAAA,MAAM,GAAE;AACN,wBACE;AAAS,MAAA,EAAE,EAAC,MAAZ;AAAA,6BAEE,QAAC,aAAD;AAAA,+BACE;AAAA,kCACE,QAAC,MAAD;AAAA,oCACI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,WAAZ;AAAwB,cAAA,SAAS,EAAEL;AAAnC;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,WAAZ;AAAwB,cAAA,SAAS,EAAEF;AAAnC;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE,QAAC,MAAD;AAAQ,YAAA,iBAAiB,EAAE,KAAKQ;AAAhC;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF,CADM,CAeL;AACF,GArE0B,CAqE1B;;;AArE0B,C,CAwE5B;;;AACD,eAAeF,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport ToDoList from './ToDoList'\nimport NavBar from './NavBar'\nimport AddTask from './AddTask'\nimport { BrowserRouter , Switch, Route} from 'react-router-dom'\n// import initialData from '../initialData'\n// import uniqid from 'uniqid'\n// import Fetching from './Fetching'\n//import uniqid from 'uniqid';\n\n\n\nclass App  extends Component {\n\n  // state = {\n  //   fetching: true,\n  //   tasks: []\n  // }\n\n  // componentDidMount = () => {\n  //   let delay = Math.floor(Math.random() * 5000)\n  //   console.log(delay)\n  //   setTimeout(() => {\n  //     this.setState({\n  //       fetching: false,\n  //       tasks : initialData\n  //     })\n  //   }, delay)\n  // }\n\n\n\n  // onAddTask = (newTaskName) => {\n  //   let newTask = {\n  //     id: uniqid(),\n  //     name: newTaskName,\n  //     completed: false\n  //   }\n  //   this.setState(prevState => ({\n  //     tasks: [...prevState.tasks, newTask]\n  //   }))\n  // }\n\n  // onToggleCompleted = (taskId) => {\n  //   //get the task to modify\n  //   let updTask = this.state.tasks.find(task => task.id === taskId)\n  //   //toggle the value of completed in the task\n  //   updTask.completed = !updTask.completed\n  //   //put the new version of the task in the state\n  //   this.setState(prevState => (\n  //     prevState.tasks.map(task => {\n  //       return task.id === taskId ? updTask : task\n  //     })\n  //   ))\n  // }\n\n  // onDeleteCompleted = () => {\n  //   this.setState(prevState => {\n  //     let newState = prevState.tasks.filter(task => !task.completed)\n  //     return {\n  //       tasks: newState\n  //     }\n  //   })\n  // }\n\n  render(){\n    return(\n      <section id=\"toDo\">\n        {/* {this.state.fetching? <Fetching /> : null} */}\n        <BrowserRouter>\n          <>\n            <Switch>\n                <Route path=\"/add-task\" component={AddTask} />\n                <Route path=\"/:filter?\" component={ToDoList} />\n            </Switch>\n            <NavBar onDeleteCompleted={this.onDeleteCompleted}/>\n          </>\n        </BrowserRouter>\n       \n    </section>\n    )//end return in render\n  }//end render\n\n\n}//end App class\nexport default App;\n"]},"metadata":{},"sourceType":"module"}