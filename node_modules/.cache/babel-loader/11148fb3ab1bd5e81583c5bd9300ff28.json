{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _objectSpread from \"C:/Users/hind1/OneDrive/Bureau/DeskTopFolder/Linkedin-learning/fichiers_d_exercice_reactjs_etats_application/state/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\hind1\\\\OneDrive\\\\Bureau\\\\DeskTopFolder\\\\Linkedin-learning\\\\fichiers_d_exercice_reactjs_etats_application\\\\state\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport ToDoList from './ToDoList';\nimport NavBar from './NavBar';\nimport AddTask from './AddTask';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport initialData from '../initialData';\nimport uniqid from 'uniqid';\nimport Fetching from './Fetching'; //import uniqid from 'uniqid';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fetching: true,\n      tasks: []\n    };\n\n    this.componentDidMount = () => {\n      let delay = Math.floor(Math.random() * 5000);\n      console.log(delay);\n      setTimeout(() => {\n        this.setState({\n          fetching: false,\n          tasks: initialData\n        });\n      }, delay);\n    };\n\n    this.onAddTask = newTaskName => {\n      let newTask = {\n        id: uniqid(),\n        name: newTaskName,\n        completed: false\n      };\n      this.setState(prevState => ({\n        tasks: [...prevState.tasks, newTask]\n      }));\n    };\n\n    this.onToggleCompleted = taskId => {\n      //get the task to modify\n      let updTask = this.state.tasks.find(task => task.id === taskId); //toggle the value of completed in the task\n\n      updTask.completed = !updTask.completed; //put the new version of the task in the state\n\n      this.setState(prevState => prevState.tasks.map(task => {\n        return task.id === taskId ? updTask : task;\n      }));\n    };\n\n    this.onDeleteCompleted = () => {\n      this.setState(prevState => {\n        let newState = prevState.tasks.filter(task => !task.completed);\n        return {\n          tasks: newState\n        };\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"toDo\",\n      children: [this.state.fetching ? /*#__PURE__*/_jsxDEV(Fetching, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 31\n      }, this) : null, /*#__PURE__*/_jsxDEV(BrowserRouter, {\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/add-task\",\n              render: props => /*#__PURE__*/_jsxDEV(AddTask, _objectSpread(_objectSpread({}, props), {}, {\n                onAddTask: this.onAddTask\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 60\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/:filter?\",\n              render: props => /*#__PURE__*/_jsxDEV(ToDoList, _objectSpread(_objectSpread({}, props), {}, {\n                tasks: this.state.tasks,\n                onToggleCompleted: this.onToggleCompleted\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 60\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavBar, {\n            onDeleteCompleted: this.onDeleteCompleted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this); //end return in render\n  } //end render\n\n\n} //end App class\n\n\nexport default App;","map":{"version":3,"sources":["C:/Users/hind1/OneDrive/Bureau/DeskTopFolder/Linkedin-learning/fichiers_d_exercice_reactjs_etats_application/state/src/components/App.js"],"names":["React","Component","ToDoList","NavBar","AddTask","BrowserRouter","Switch","Route","initialData","uniqid","Fetching","App","state","fetching","tasks","componentDidMount","delay","Math","floor","random","console","log","setTimeout","setState","onAddTask","newTaskName","newTask","id","name","completed","prevState","onToggleCompleted","taskId","updTask","find","task","map","onDeleteCompleted","newState","filter","render","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ToDoList from './ToDoList'\nimport NavBar from './NavBar'\nimport AddTask from './AddTask'\nimport { BrowserRouter , Switch, Route} from 'react-router-dom'\nimport initialData from '../initialData'\nimport uniqid from 'uniqid'\nimport Fetching from './Fetching'\n//import uniqid from 'uniqid';\n\n\n\nclass App  extends Component {\n\n  state = {\n    fetching: true,\n    tasks: []\n  }\n\n  componentDidMount = () => {\n    let delay = Math.floor(Math.random() * 5000)\n    console.log(delay)\n    setTimeout(() => {\n      this.setState({\n        fetching: false,\n        tasks : initialData\n      })\n    }, delay)\n  }\n\n\n\n  onAddTask = (newTaskName) => {\n    let newTask = {\n      id: uniqid(),\n      name: newTaskName,\n      completed: false\n    }\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, newTask]\n    }))\n  }\n\n  onToggleCompleted = (taskId) => {\n    //get the task to modify\n    let updTask = this.state.tasks.find(task => task.id === taskId)\n    //toggle the value of completed in the task\n    updTask.completed = !updTask.completed\n    //put the new version of the task in the state\n    this.setState(prevState => (\n      prevState.tasks.map(task => {\n        return task.id === taskId ? updTask : task\n      })\n    ))\n  }\n\n  onDeleteCompleted = () => {\n    this.setState(prevState => {\n      let newState = prevState.tasks.filter(task => !task.completed)\n      return {\n        tasks: newState\n      }\n    })\n  }\n\n  render(){\n    return(\n      <section id=\"toDo\">\n        {this.state.fetching? <Fetching /> : null}\n        <BrowserRouter>\n          <>\n            <Switch>\n                <Route path=\"/add-task\" render={(props) => <AddTask {...props} onAddTask={this.onAddTask} />} />\n                <Route path=\"/:filter?\" render={(props) => <ToDoList {...props} tasks={this.state.tasks} onToggleCompleted={this.onToggleCompleted} />} />\n            </Switch>\n            <NavBar onDeleteCompleted={this.onDeleteCompleted}/>\n          </>\n        </BrowserRouter>\n       \n    </section>\n    )//end return in render\n  }//end render\n\n\n}//end App class\nexport default App;\n"]},"metadata":{},"sourceType":"module"}